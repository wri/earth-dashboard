define(["./when-208fe5b0","./Cartesian2-8417ca3d","./ArcType-dc1c5aee","./arrayRemoveDuplicates-0f62a181","./Transforms-a73b3b3b","./Color-b0d12252","./ComponentDatatype-9204e9f6","./Check-d18af7c4","./GeometryAttribute-04a19cfe","./GeometryAttributes-b0b294d8","./IndexDatatype-d47ad6f6","./Math-4e53b694","./PolylinePipeline-28f5feec","./VertexFormat-e8cbf5b3","./RuntimeError-7f634f5d","./WebGLConstants-76bb35d1","./EllipsoidGeodesic-8015072b","./EllipsoidRhumbLine-28521929","./IntersectionTests-7d224a2f","./Plane-4aa8974d"],(function(e,t,r,a,o,n,i,l,s,p,d,c,u,y,m,f,h,C,v,g){"use strict";var _=[];function b(a){var o=(a=e.defaultValue(a,e.defaultValue.EMPTY_OBJECT)).positions,i=a.colors,l=e.defaultValue(a.width,1),s=e.defaultValue(a.colorsPerVertex,!1);this._positions=o,this._colors=i,this._width=l,this._colorsPerVertex=s,this._vertexFormat=y.VertexFormat.clone(e.defaultValue(a.vertexFormat,y.VertexFormat.DEFAULT)),this._arcType=e.defaultValue(a.arcType,r.ArcType.GEODESIC),this._granularity=e.defaultValue(a.granularity,c.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(a.ellipsoid,t.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry",o=1+o.length*t.Cartesian3.packedLength,o+=e.defined(i)?1+i.length*n.Color.packedLength:1,this.packedLength=o+t.Ellipsoid.packedLength+y.VertexFormat.packedLength+4}b.pack=function(r,a,o){var i;o=e.defaultValue(o,0);var l=r._positions,s=l.length;for(a[o++]=s,i=0;i<s;++i,o+=t.Cartesian3.packedLength)t.Cartesian3.pack(l[i],a,o);var p=r._colors;s=e.defined(p)?p.length:0;for(a[o++]=s,i=0;i<s;++i,o+=n.Color.packedLength)n.Color.pack(p[i],a,o);return t.Ellipsoid.pack(r._ellipsoid,a,o),o+=t.Ellipsoid.packedLength,y.VertexFormat.pack(r._vertexFormat,a,o),o+=y.VertexFormat.packedLength,a[o++]=r._width,a[o++]=r._colorsPerVertex?1:0,a[o++]=r._arcType,a[o]=r._granularity,a};var A=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),E=new y.VertexFormat,P={positions:void 0,colors:void 0,ellipsoid:A,vertexFormat:E,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0};b.unpack=function(r,a,o){a=e.defaultValue(a,0);for(var i=r[a++],l=new Array(i),s=0;s<i;++s,a+=t.Cartesian3.packedLength)l[s]=t.Cartesian3.unpack(r,a);var p=0<(i=r[a++])?new Array(i):void 0;for(s=0;s<i;++s,a+=n.Color.packedLength)p[s]=n.Color.unpack(r,a);var d=t.Ellipsoid.unpack(r,a,A);a+=t.Ellipsoid.packedLength;var c=y.VertexFormat.unpack(r,a,E);a+=y.VertexFormat.packedLength;var u=r[a++],m=1===r[a++],f=r[a++],h=r[a];return e.defined(o)?(o._positions=l,o._colors=p,o._ellipsoid=t.Ellipsoid.clone(d,o._ellipsoid),o._vertexFormat=y.VertexFormat.clone(c,o._vertexFormat),o._width=u,o._colorsPerVertex=m,o._arcType=f,o._granularity=h,o):(P.positions=l,P.colors=p,P.width=u,P.colorsPerVertex=m,P.arcType=f,P.granularity=h,new b(P))};var w=new t.Cartesian3,T=new t.Cartesian3,x=new t.Cartesian3,k=new t.Cartesian3;return b.createGeometry=function(l){var y=l._width,m=l._vertexFormat,f=l._colors,h=l._colorsPerVertex,C=l._arcType,v=l._granularity,g=l._ellipsoid,b=a.arrayRemoveDuplicates(l._positions,t.Cartesian3.equalsEpsilon);if(!((N=b.length)<2||y<=0)){if(C===r.ArcType.GEODESIC||C===r.ArcType.RHUMB){var A,E=C===r.ArcType.GEODESIC?(A=c.CesiumMath.chordLength(v,g.maximumRadius),u.PolylinePipeline.numberOfPoints):(A=v,u.PolylinePipeline.numberOfPointsRhumbLine),P=u.PolylinePipeline.extractHeights(b,g);if(e.defined(f)){for(var D=1,V=0;V<N-1;++V)D+=E(b[V],b[V+1],A);var L=new Array(D),F=0;for(V=0;V<N-1;++V){var G=b[V],O=b[V+1],R=f[V],I=E(G,O,A);if(h&&V<D)for(var S=function(e,t,r){var a=_;a.length=r;var o=e.red,i=e.green,l=e.blue,s=e.alpha,p=t.red,d=t.green,c=t.blue,u=t.alpha;if(n.Color.equals(e,t)){for(C=0;C<r;C++)a[C]=n.Color.clone(e);return a}for(var y=(p-o)/r,m=(d-i)/r,f=(c-l)/r,h=(u-s)/r,C=0;C<r;C++)a[C]=new n.Color(o+C*y,i+C*m,l+C*f,s+C*h);return a}(R,f[V+1],I),B=S.length,U=0;U<B;++U)L[F++]=S[U];else for(U=0;U<I;++U)L[F++]=n.Color.clone(R)}L[F]=n.Color.clone(f[f.length-1]),f=L,_.length=0}b=C===r.ArcType.GEODESIC?u.PolylinePipeline.generateCartesianArc({positions:b,minDistance:A,ellipsoid:g,height:P}):u.PolylinePipeline.generateCartesianRhumbArc({positions:b,granularity:A,ellipsoid:g,height:P})}g=4*(N=b.length)-4;var N,M,H,W,Y=new Float64Array(3*g),q=new Float64Array(3*g),z=new Float64Array(3*g),J=new Float32Array(2*g),j=m.st?new Float32Array(2*g):void 0,K=e.defined(f)?new Uint8Array(4*g):void 0,Q=0,X=0,Z=0,$=0;for(U=0;U<N;++U){0===U?(t.Cartesian3.subtract(b[0],b[1],M=w),t.Cartesian3.add(b[0],M,M)):M=b[U-1],t.Cartesian3.clone(M,x),t.Cartesian3.clone(b[U],T),U===N-1?(t.Cartesian3.subtract(b[N-1],b[N-2],M=w),t.Cartesian3.add(b[N-1],M,M)):M=b[U+1],t.Cartesian3.clone(M,k),e.defined(K)&&(H=0===U||h?f[U]:f[U-1],U!==N-1&&(W=f[U]));for(var ee=U===N-1?2:4,te=0===U?2:0;te<ee;++te){t.Cartesian3.pack(T,Y,Q),t.Cartesian3.pack(x,q,Q),t.Cartesian3.pack(k,z,Q),Q+=3;var re=te-2<0?-1:1;J[X++]=te%2*2-1,J[X++]=re*y,m.st&&(j[Z++]=U/(N-1),j[Z++]=Math.max(J[X-2],0)),e.defined(K)&&(K[$++]=n.Color.floatToByte((re=te<2?H:W).red),K[$++]=n.Color.floatToByte(re.green),K[$++]=n.Color.floatToByte(re.blue),K[$++]=n.Color.floatToByte(re.alpha))}}(P=new p.GeometryAttributes).position=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:Y}),P.prevPosition=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:q}),P.nextPosition=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:z}),P.expandAndWidth=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:J}),m.st&&(P.st=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:j})),e.defined(K)&&(P.color=new s.GeometryAttribute({componentDatatype:i.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:K,normalize:!0}));var ae=d.IndexDatatype.createTypedArray(g,6*N-6),oe=0,ne=0,ie=N-1;for(U=0;U<ie;++U)ae[ne++]=oe,ae[ne++]=oe+2,ae[ne++]=oe+1,ae[ne++]=oe+1,ae[ne++]=oe+2,ae[ne++]=oe+3,oe+=4;return new s.Geometry({attributes:P,indices:ae,primitiveType:s.PrimitiveType.TRIANGLES,boundingSphere:o.BoundingSphere.fromPoints(b),geometryType:s.GeometryType.POLYLINES})}},function(r,a){return(r=e.defined(a)?b.unpack(r,a):r)._ellipsoid=t.Ellipsoid.clone(r._ellipsoid),b.createGeometry(r)}}));