define(["./arrayRemoveDuplicates-0f62a181","./Transforms-a73b3b3b","./Cartesian2-8417ca3d","./Check-d18af7c4","./ComponentDatatype-9204e9f6","./CoplanarPolygonGeometryLibrary-6c63fe5e","./when-208fe5b0","./GeometryAttribute-04a19cfe","./GeometryAttributes-b0b294d8","./GeometryInstance-d919cab6","./GeometryPipeline-5e672526","./IndexDatatype-d47ad6f6","./PolygonGeometryLibrary-a62e716e","./Math-4e53b694","./RuntimeError-7f634f5d","./WebGLConstants-76bb35d1","./OrientedBoundingBox-18b4901f","./EllipsoidTangentPlane-9123a53b","./IntersectionTests-7d224a2f","./Plane-4aa8974d","./AttributeCompression-f02ec82f","./EncodedCartesian3-874933de","./ArcType-dc1c5aee","./EllipsoidRhumbLine-28521929","./PolygonPipeline-4d0ff0fe"],(function(e,t,r,n,o,a,i,y,l,c,p,s,u,d,m,f,g,b,h,P,G,v,L,C,T){"use strict";function E(e){e=(e=i.defaultValue(e,i.defaultValue.EMPTY_OBJECT)).polygonHierarchy,this._polygonHierarchy=e,this._workerName="createCoplanarPolygonOutlineGeometry",this.packedLength=u.PolygonGeometryLibrary.computeHierarchyPackedLength(e)+1}E.fromPositions=function(e){return new E({polygonHierarchy:{positions:(e=i.defaultValue(e,i.defaultValue.EMPTY_OBJECT)).positions}})},E.pack=function(e,t,r){return r=i.defaultValue(r,0),t[r=u.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,r)]=e.packedLength,t};var k={polygonHierarchy:{}};return E.unpack=function(e,t,r){t=i.defaultValue(t,0);var n=u.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t);return t=n.startingIndex,delete n.startingIndex,t=e[t],(r=i.defined(r)?r:new E(k))._polygonHierarchy=n,r.packedLength=t,r},E.createGeometry=function(n){var i=n._polygonHierarchy;n=i.positions;if(!((n=e.arrayRemoveDuplicates(n,r.Cartesian3.equalsEpsilon,!0)).length<3)&&a.CoplanarPolygonGeometryLibrary.validOutline(n)){var d=u.PolygonGeometryLibrary.polygonOutlinesFromHierarchy(i,!1);if(0!==d.length){for(var m=[],f=0;f<d.length;f++){var g=new c.GeometryInstance({geometry:function(e){for(var t=e.length,r=new Float64Array(3*t),n=s.IndexDatatype.createTypedArray(t,2*t),a=0,i=0,c=0;c<t;c++){var p=e[c];r[a++]=p.x,r[a++]=p.y,r[a++]=p.z,n[i++]=c,n[i++]=(c+1)%t}var u=new l.GeometryAttributes({position:new y.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:r})});return new y.Geometry({attributes:u,indices:n,primitiveType:y.PrimitiveType.LINES})}(d[f])});m.push(g)}return n=p.GeometryPipeline.combineInstances(m)[0],i=t.BoundingSphere.fromPoints(i.positions),new y.Geometry({attributes:n.attributes,indices:n.indices,primitiveType:n.primitiveType,boundingSphere:i})}}},function(e,t){return(e=i.defined(t)?E.unpack(e,t):e)._ellipsoid=r.Ellipsoid.clone(e._ellipsoid),E.createGeometry(e)}}));